//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : WebSAE - Sistema de Administración de Eventos
//  @ File Name : Email.java
//  @ Date : 28/03/2009
//  @ Author : Guillermo Pizarro
//  @ Version : v1.0.0
//
//

package websae.informacion;

import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Address;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.Velocity;
import org.apache.velocity.exception.ParseErrorException;
import org.apache.velocity.exception.ResourceNotFoundException;

/**
 *
 * @author Guillermo Pizarro
 */
public class Email {
    
    /** Email a quien va dirigido. */
    private Address[] to;
    /** Direccion de email para envio de copia. */
    private Address[] cc;
    /** Direccion de email para envio de copia oculta. */
    private Address[] bcc;
    /** Informacion del email de administracion. */
    private InternetAddress admin;
    /** Titulo del mensaje. */
    private String subject;
    /** Nombre del host desde donde se envia el email. */
    private String host;
    /** Nombre del archivo en el que se encuentra escrito el email. */
    private String template;
    private String path_template;
    /** Parametros para poder ingresar ciertos datos en el template. */
    private HashMap parametros;
    
    /**
     * Constructor de la Clase Email
     * @param subject       Titulo del email
     * @param host          Host del email desde donde es enviado
     * @param template      Nombre del archivo en el que esta escrito el template
     * @param path          La ruta de la plantilla, desde un servlet de la siguiente forma: getServletContext().getRealPath("/")
     * @param parametros    Los parametros contenidos en el email
     * @param admin         Nombres, apellidos (o nombre de la institucion) y correo de la administracion.
     * @param to            Arreglo de emails (nombres apellidos, email) hacia quien va dirigido el email
     * @param cc            Arreglo de emails (nombres apellidos, email) para copia (puede ser NULO)
     * @param bcc           Arreglo de emails (nombres apellidos, email) para copia oculta (puede ser NULO)
     */
    public Email (String subject, String host, String template, String path, HashMap parametros, InternetAddress admin, Address[] to, Address[] cc, Address[] bcc) {
        this.subject = subject;
        this.host = host;
        this.template = template;
        this.parametros = parametros;
        this.admin = admin;
        this.to = to;
        if (cc != null)
            this.cc = cc;
        else
            this.cc = new Address[0];
        if (bcc != null)
            this.bcc = bcc;
        else
            this.bcc = new Address[0];
        
        this.path_template = path;
        this.template = template;
    }
    
    public void enviar() {
        try {
            Properties velocityProperties = new Properties();
            velocityProperties.setProperty(org.apache.velocity.runtime.Runtime.FILE_RESOURCE_LOADER_PATH, this.path_template);
            try {
                Velocity.init(velocityProperties);
            } catch (Exception ex) {
                Logger.getLogger(Email.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            /** Inicialización de los parámetros para envío de email. */
            VelocityContext context = inicializar_parametros();
            Properties props = System.getProperties();
            props.put("mail.smtp.host", this.host);
            Session session = Session.getDefaultInstance(props, null);
            
            /** Contrucción del email */
            Message msg = new MimeMessage(session);
            try {
                msg.setSubject(this.subject);
                /** Inicialización del email del administrador */
                msg.setFrom( this.admin );
                /** Inicialización del email destinatario */
                msg.setRecipients(Message.RecipientType.TO, this.to);
                if (this.cc.length > 0) {
                    /** Inicialización de los emails con copias */
                    msg.setRecipients(Message.RecipientType.CC, this.cc);
                }
                if (this.bcc.length > 0) {
                    /** Inicialización de los emails con copias ocultas */
                    msg.setRecipients(Message.RecipientType.BCC, this.bcc);
                }
            } catch (MessagingException ex) {
                Logger.getLogger(Email.class.getName()).log(Level.SEVERE, null, ex);
            }

            StringWriter messageContent = new StringWriter();
            Template archivo = Velocity.getTemplate(this.template);
            archivo.merge(context, messageContent);
            msg.setText(messageContent.toString(  ));

            Transport.send(msg);

        } catch (ResourceNotFoundException ex) {
            Logger.getLogger(Email.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseErrorException ex) {
            Logger.getLogger(Email.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Email.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private VelocityContext inicializar_parametros() {
        VelocityContext context = new VelocityContext( );
        
        Object[] claves = this.parametros.keySet().toArray();
        for (int i=0; i<claves.length; i++) {
            String clave = (String) claves[i];
            context.put(clave, this.parametros.get(clave).toString());
        }
        return context;
    }
    
    public static InternetAddress obtener_email(String email, String persona) {
        InternetAddress admin = null;
        try {
            admin = new InternetAddress(email, persona);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Email.class.getName()).log(Level.SEVERE, null, ex);
        }
        return admin;
    }

    public static Address[] direcciones_emails(HashMap<String, String> direcciones) {
        Address[] emails = new Address[direcciones.size()];
        /** Las claves son los emails */
        Object[] claves = direcciones.keySet().toArray();
        for (int i=0; i<claves.length; i++) {
            String clave = (String) claves[i];
            emails[i] = obtener_email(clave, direcciones.get(clave).toString());
        }
        return emails;
    }
}
