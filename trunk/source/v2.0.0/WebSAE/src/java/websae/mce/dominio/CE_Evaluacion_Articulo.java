//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : WebSAE
//  @ File Name : CE_Evaluacion_Articulo.java
//  @ Date : 23/04/2009
//  @ Author : Guillermo Pizarro
//
//
package websae.mce.dominio;


import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import mad.eventos.Datos;
import mad.objetos.Registro;
import mad.objetos.Table;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import websae.informacion.Funciones;

public class CE_Evaluacion_Articulo {
    
    // <editor-fold defaultstate="collapsed" desc="Objetos Maestros">
    public CE_Miembro_Comite_Evento ref_evaluador;
    public CE_Miembro_Comite_Evento ref_administrador;
    public CE_Evaluacion ref_evaluacion;
    public CE_Articulo ref_articulo;
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Objeto Dependiente">
    public List<CE_Respuesta> ref_respuesta;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Atributos">
    private BigDecimal et_id_evaluacion_articulo;
    /** Variable usada para el comentario del articulo tipo resumen. */
    private String et_comentario;
    private String et_estado;
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Atributos de informacion">
    public CE_Pregunta ref_pregunta;
    public List<CE_Alternativa> ref_alternativa;
    // </editor-fold>

    public CE_Evaluacion_Articulo() {
        this.ref_articulo = new CE_Articulo();
    }
    
    // <editor-fold defaultstate="collapsed" desc="Setters & Getters">
    public BigDecimal getEt_id_evaluacion_articulo() {
        return et_id_evaluacion_articulo;
    }

    public void setEt_id_evaluacion_articulo(BigDecimal et_id_evaluacion_articulo) {
        this.et_id_evaluacion_articulo = et_id_evaluacion_articulo;
    }

    public String getEt_estado() {
        return et_estado;
    }

    public void setEt_estado(String et_estado) {
        this.et_estado = et_estado;
    }

    public String getEt_comentario() {
        return et_comentario;
    }

    public void setEt_comentario(String et_comentario) {
        this.et_comentario = et_comentario;
    }
    // </editor-fold>
    
    public void cr_CE_Evaluacion_Articulo(Table objeto) {
        this.et_id_evaluacion_articulo = Funciones.getBigDecimal(objeto.get("et_id_evaluacion_articulo"));
        this.et_comentario = (String) objeto.get("et_comentario");
        this.et_estado = (String) objeto.get("et_estado");
        this.ref_articulo.setAr_id_articulo( Funciones.getBigDecimal(objeto.get("ref_articulo")) );
        
        BigDecimal id = Funciones.getBigDecimal(objeto.get("ref_evaluacion"));
        if (id != null) {
            this.ref_evaluacion = new CE_Evaluacion();
            this.ref_evaluacion.setEv_id_evaluacion( id );
        }
        id = Funciones.getBigDecimal(objeto.get("ref_evaluador"));
        if (id != null) {
            this.ref_evaluador = new CE_Miembro_Comite_Evento();
            this.ref_evaluador.setMc_id_miembro_comite_evento( id );
            this.ref_evaluador.setMc_es_evaluador( Boolean.TRUE );
        }
        id = Funciones.getBigDecimal(objeto.get("ref_administrador"));
        if (id != null) {
            this.ref_administrador = new CE_Miembro_Comite_Evento();
            this.ref_administrador.setMc_id_miembro_comite_evento( id );
            this.ref_administrador.setMc_es_administrador( Boolean.TRUE );
        }
    }
    
    public static List<List<CE_Evaluacion_Articulo>> respuestas(String id_articulo, Boolean mostrar_todo) {
        List<List<CE_Evaluacion_Articulo>> evaluaciones = new LinkedList<List<CE_Evaluacion_Articulo>>();
        Datos datos = new Datos("WebSAE");
        
        CE_Evaluacion evaluacion = CE_Evaluacion.buscar_evaluacion( Funciones.getBigDecimal(id_articulo) );

        for (int i = 0; i < evaluacion.ref_seccion.size(); i++) {
            CE_Seccion seccion = evaluacion.ref_seccion.get(i);
            if (mostrar_todo || !seccion.getSe_oculta()) {
                for (int j = 0; j < seccion.ref_pregunta.size(); j++) {
                    CE_Pregunta pregunta = seccion.ref_pregunta.get(j);

                    List<CE_Evaluacion_Articulo> elementos = new LinkedList<CE_Evaluacion_Articulo>();
                    String sql = "SELECT * FROM ce_evaluacion_Articulo WHERE ref_articulo = "+id_articulo+" AND ref_administrador IS NULL;";
                    Registro registros = datos.consulta(sql);
                    for (int k = 0; k < registros.size(); k++) {
                        CE_Evaluacion_Articulo elemento = new CE_Evaluacion_Articulo();
                        elemento.cr_CE_Evaluacion_Articulo( (Table) registros.get(k) );

                        elemento.ref_respuesta = new LinkedList<CE_Respuesta>();
                        elemento.ref_pregunta = new CE_Pregunta();
                        elemento.ref_pregunta = pregunta;

                        if (pregunta.getRef_tipo_pregunta().getTp_id_tipo_pregunta().compareTo( CE_Tipo_Pregunta.ABIERTA ) == 0) {
                            sql = "SELECT * FROM ce_respuesta WHERE ref_evaluacion_articulo = "+elemento.getEt_id_evaluacion_articulo()+" AND ref_pregunta = "+pregunta.getPr_id_pregunta()+";";
                            Registro respuestas = datos.consulta(sql);
                            for (int indice = 0; indice < respuestas.size(); indice++) {
                                CE_Respuesta respuesta = new CE_Respuesta();
                                respuesta.cr_CE_Respuesta( respuestas.get(indice) );
                                elemento.ref_respuesta.add(respuesta);
                            }
                        } else {
                            elemento.ref_alternativa = new LinkedList<CE_Alternativa>();
                            for (int indice_alt=0; indice_alt<pregunta.ref_alternativa.size(); indice_alt++) {
                                CE_Alternativa alternativa = pregunta.ref_alternativa.get(indice_alt);

                                elemento.ref_alternativa.add(alternativa);
                                sql = "SELECT * FROM ce_respuesta WHERE ref_evaluacion_articulo = "+elemento.getEt_id_evaluacion_articulo()+" AND ref_alternativa = "+alternativa.getAl_id_alternativa()+";";
                                Registro respuestas = datos.consulta(sql);
                                for (int indice = 0; indice < respuestas.size(); indice++) {
                                    CE_Respuesta respuesta = new CE_Respuesta();
                                    respuesta.cr_CE_Respuesta( respuestas.get(indice) );
                                    elemento.ref_respuesta.add( respuesta );
                                }
                            }
                        }
                        elementos.add(elemento);
                    }
                   evaluaciones.add(elementos);
                }
            }
        }
        return evaluaciones;
    }

    public static JSONObject toJSON(List<List<CE_Evaluacion_Articulo>> elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (int i=0; i<elementos.size(); i++) 
                jsonItems.put( toJSONObject( elementos.get(i) ) );
            
            json.put("evaluacion", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(CE_Evaluacion_Articulo.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
    
    public static JSONObject toJSONObject(List<CE_Evaluacion_Articulo> elementos) {
        JSONObject json = new JSONObject();
        try {
            for (int i=0; i<elementos.size(); i++) {
                CE_Evaluacion_Articulo elemento = elementos.get(i);
                if (i == 0) {
                    json.put("id", elemento.ref_pregunta.getPr_id_pregunta());
                    json.put("pregunta", elemento.ref_pregunta.getPr_nombre());
                }
                
                if (elemento.ref_pregunta.getRef_tipo_pregunta().getTp_id_tipo_pregunta().compareTo( CE_Tipo_Pregunta.ABIERTA ) == 0) {
                    if (elemento.ref_respuesta.size() > 0)
                        json.put("respuesta_"+(i+1), elemento.ref_respuesta.get(0).getRe_texto());
                    else
                        json.put("respuesta_"+(i+1), "");
                } else {
                    int centinela = 0;
                    String cadena = "";
                    for (int j=0; j<elemento.ref_alternativa.size(); j++) {
                        CE_Alternativa alternativa = elemento.ref_alternativa.get(j);
                        if (elemento.ref_respuesta.size() > 0) {
                            CE_Respuesta respuesta = elemento.ref_respuesta.get(j);
                            if (respuesta.getRe_seleccionada()) {
                                if (centinela != 0) cadena += ", ";
                                cadena += alternativa.getAl_nombre();
                                centinela++;
                            }
                        }
                    }
                    json.put("respuesta_"+(i+1), cadena);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(CE_Evaluacion_Articulo.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
}