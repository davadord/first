//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : WebSAE
//  @ File Name : CE_Seccion.java
//  @ Date : 23/04/2009
//  @ Author : Guillermo Pizarro
//
//
package websae.mce.dominio;

import java.math.BigDecimal;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import mad.eventos.Datos;
import mad.objetos.Registro;
import mad.objetos.Table;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class CE_Seccion {

    // <editor-fold defaultstate="collapsed" desc="Objetos Maestros">
    public CE_Evaluacion ref_evaluacion;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Objetos Dependientes">
    public List<CE_Pregunta> ref_pregunta;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Atributos">
    private BigDecimal se_id_seccion;
    private String se_nombre;
    private String se_descripcion;
    private Boolean se_oculta;
    private Integer se_orden;
    // </editor-fold>

    public CE_Seccion() {
    }

    // <editor-fold defaultstate="collapsed" desc="Setters & Getters">
    public CE_Evaluacion getRef_evaluacion() {
        return ref_evaluacion;
    }

    public void setRef_evaluacion(CE_Evaluacion ref_evaluacion) {
        this.ref_evaluacion = ref_evaluacion;
    }

    public Integer getSe_orden() {
        return se_orden;
    }

    public void setSe_orden(Integer se_orden) {
        this.se_orden = se_orden;
    }

    public List<CE_Pregunta> getRef_pregunta() {
        return ref_pregunta;
    }

    public void setRef_pregunta(List<CE_Pregunta> ref_pregunta) {
        this.ref_pregunta = ref_pregunta;
    }

    public String getSe_descripcion() {
        return se_descripcion;
    }

    public void setSe_descripcion(String se_descripcion) {
        this.se_descripcion = se_descripcion;
    }

    public BigDecimal getSe_id_seccion() {
        return se_id_seccion;
    }

    public void setSe_id_seccion(BigDecimal se_id_seccion) {
        this.se_id_seccion = se_id_seccion;
    }

    public Boolean getSe_oculta() {
        return se_oculta;
    }

    public void setSe_oculta(Boolean se_oculta) {
        this.se_oculta = se_oculta;
    }

    public String getSe_nombre() {
        return se_nombre;
    }

    public void setSe_nombre(String se_nombre) {
        this.se_nombre = se_nombre;
    }
    // </editor-fold>

    public void cr_CE_Seccion(Table objeto) {
        this.se_id_seccion = new BigDecimal((Long) objeto.get("se_id_seccion"));
        this.se_nombre = (String) objeto.get("se_nombre");
        this.se_descripcion = (String) objeto.get("se_descripcion");
        this.se_oculta = new Boolean( objeto.get("se_oculta").toString() );
        this.se_orden = (Integer) objeto.get("se_orden");
    }

    public void fin_CE_Seccion() {
    }

    public void registrar_pregunta(BigDecimal id_pregunta, BigDecimal tipo_pregunta, BigDecimal id_respuesta, String respuesta) {
        int n = this.ref_pregunta.size();
        for (int i=0; i<n; i++) {
            CE_Pregunta pregunta = this.ref_pregunta.get(i);
            if (pregunta.getPr_id_pregunta().compareTo( id_pregunta ) == 0) {
                if (tipo_pregunta.compareTo( CE_Tipo_Pregunta.ABIERTA ) == 0) {
                    pregunta.ref_respuesta = new CE_Respuesta();
                    pregunta.ref_respuesta.setRe_texto( respuesta );
                } else {
                    pregunta.registrar_pregunta(tipo_pregunta, id_respuesta);
                }
            }
        }
    }

    public static CE_Seccion buscar_seccion(String id_seccion) {
        CE_Seccion elemento = new CE_Seccion();
        
        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ce_seccion WHERE se_id_seccion = " + id_seccion + ";";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++)
            elemento.cr_CE_Seccion( (Table) registros.get(i) );
        
        return elemento;
    }
    
    public static List<CE_Seccion> secciones(String id_evaluacion) {
        List<CE_Seccion> elementos = new LinkedList<CE_Seccion>();

        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ce_seccion WHERE ref_evaluacion = " + id_evaluacion + " ORDER BY se_orden asc, se_nombre;";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++) {
            CE_Seccion elemento = new CE_Seccion();
            elemento.cr_CE_Seccion(registros.get(i));
            elemento.ref_pregunta = CE_Pregunta.preguntas( elemento.getSe_id_seccion().toString() );
            elementos.add(elemento);
        }
        return elementos;
    }

    public static JSONObject toJSON(List<CE_Seccion> elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator<CE_Seccion> it = elementos.iterator(); it.hasNext();) {
                CE_Seccion elemento = it.next();
                jsonItems.put(toJSONObject(elemento));
            }
            json.put("identifier", "id_seccion");
            json.put("label", "nombre");
            json.put("items", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(CE_Seccion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    public static JSONObject toJSONObject(CE_Seccion elemento) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_seccion", elemento.getSe_id_seccion());
            json.put("nombre", elemento.getSe_nombre());
            json.put("descripcion", elemento.getSe_descripcion());
            json.put("oculta", elemento.getSe_oculta());
            json.put("orden", elemento.getSe_orden());
        } catch (Exception ex) {
            Logger.getLogger(CE_Seccion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
    
    public static JSONObject Seccion_toJSON(List<CE_Seccion> elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator<CE_Seccion> it = elementos.iterator(); it.hasNext();)
                jsonItems.put( Seccion_toJSONObject( it.next() ) );
            
            json.put("items", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(CE_Seccion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    public static JSONObject Seccion_toJSONObject(CE_Seccion elemento) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_seccion", elemento.getSe_id_seccion());
            json.put("nombre", elemento.getSe_nombre());
            json.put("descripcion", elemento.getSe_descripcion());
            json.put("oculta", elemento.getSe_oculta());
            json.put("orden", elemento.getSe_orden());
            if (elemento.ref_pregunta != null)
                json.put("preguntas", CE_Pregunta.Pregunta_toJSON( elemento.ref_pregunta ));
            else
                json.put("preguntas", CE_Pregunta.Pregunta_toJSON( CE_Pregunta.preguntas( elemento.getSe_id_seccion().toString() ) ));
        } catch (Exception ex) {
            Logger.getLogger(CE_Seccion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
}
