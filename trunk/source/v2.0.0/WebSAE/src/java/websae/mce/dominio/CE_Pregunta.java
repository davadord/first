//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : WebSAE
//  @ File Name : CE_Pregunta.java
//  @ Date : 23/04/2009
//  @ Author : Guillermo Pizarro
//
//
package websae.mce.dominio;

import java.math.BigDecimal;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import mad.eventos.Datos;
import mad.objetos.Registro;
import mad.objetos.Table;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import websae.informacion.Funciones;

public class CE_Pregunta {

    // <editor-fold defaultstate="collapsed" desc="Objetos Maestros">
    public CE_Seccion ref_seccion;
    public CE_Tipo_Pregunta ref_tipo_pregunta;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Objetos Dependientes">
    public List<CE_Alternativa> ref_alternativa;
    public CE_Respuesta ref_respuesta;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Atributos">
    private BigDecimal pr_id_pregunta;
    private String pr_nombre;
    private Integer pr_orden;
    // </editor-fold>

    public CE_Pregunta() {
        this.ref_tipo_pregunta = new CE_Tipo_Pregunta();
    }

    // <editor-fold defaultstate="collapsed" desc="Setters & Getters">
    public BigDecimal getPr_id_pregunta() {
        return pr_id_pregunta;
    }

    public void setPr_id_pregunta(BigDecimal pr_id_pregunta) {
        this.pr_id_pregunta = pr_id_pregunta;
    }

    public Integer getPr_orden() {
        return pr_orden;
    }

    public void setPr_orden(Integer pr_orden) {
        this.pr_orden = pr_orden;
    }

    public CE_Respuesta getRef_respuesta() {
        return ref_respuesta;
    }

    public void setRef_respuesta(CE_Respuesta ref_respuesta) {
        this.ref_respuesta = ref_respuesta;
    }

    public String getPr_nombre() {
        return pr_nombre;
    }

    public void setPr_nombre(String pr_nombre) {
        this.pr_nombre = pr_nombre;
    }

    public List<CE_Alternativa> getRef_alternativa() {
        return ref_alternativa;
    }

    public void setRef_alternativa(List<CE_Alternativa> ref_alternativa) {
        this.ref_alternativa = ref_alternativa;
    }

    public CE_Seccion getRef_seccion() {
        return ref_seccion;
    }

    public void setRef_seccion(CE_Seccion ref_seccion) {
        this.ref_seccion = ref_seccion;
    }

    public CE_Tipo_Pregunta getRef_tipo_pregunta() {
        return ref_tipo_pregunta;
    }

    public void setRef_tipo_pregunta(CE_Tipo_Pregunta ref_tipo_pregunta) {
        this.ref_tipo_pregunta = ref_tipo_pregunta;
    }
    // </editor-fold>

    public void cr_CE_Pregunta(Table objeto) {
        this.pr_id_pregunta = new BigDecimal((Long) objeto.get("pr_id_pregunta"));
        this.pr_nombre = (String) objeto.get("pr_nombre");
        this.pr_orden = Funciones.getInteger(objeto.get("pr_orden"));
        this.ref_tipo_pregunta.setTp_id_tipo_pregunta( Funciones.getBigDecimal(objeto.get("ref_tipo_pregunta")) );
    }

    public void registrar_pregunta(BigDecimal tipo_pregunta, BigDecimal id_respuesta) {
        int n = this.ref_alternativa.size();
        if (tipo_pregunta.compareTo( CE_Tipo_Pregunta.SELECCION_SIMPLE ) == 0) {
            for (int i=0; i<n; i++) {
                CE_Alternativa alternativa = this.ref_alternativa.get(i);
                alternativa.ref_respuesta = new CE_Respuesta();
                if (alternativa.getAl_id_alternativa().compareTo(id_respuesta) == 0)
                    alternativa.ref_respuesta.setRe_seleccionada(Boolean.TRUE);
                else
                    alternativa.ref_respuesta.setRe_seleccionada(Boolean.FALSE);
            }
        } else {
            CE_Alternativa alternativa = obtener_alternativa(id_respuesta);
            if (alternativa.ref_respuesta != null) {
                if (alternativa.ref_respuesta.getRe_seleccionada())
                    alternativa.ref_respuesta.setRe_seleccionada(Boolean.FALSE);
                else
                    alternativa.ref_respuesta.setRe_seleccionada(Boolean.TRUE);
            } else
                alternativa.ref_respuesta = new CE_Respuesta();
        }
    }
    
    private CE_Alternativa obtener_alternativa(BigDecimal id_respuesta) {
        CE_Alternativa alternativa = null;
        int n = this.ref_alternativa.size();
        for (int i=0; i<n; i++) {
            alternativa = this.ref_alternativa.get(i);
            if (alternativa.getAl_id_alternativa().compareTo(id_respuesta) == 0) return alternativa;
        }
        return alternativa;
    }
    
    public static List<CE_Pregunta> preguntas(String id_seccion) {
        List<CE_Pregunta> elementos = new LinkedList<CE_Pregunta>();

        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ce_pregunta WHERE ref_seccion = " + id_seccion + " ORDER BY pr_orden asc, pr_nombre;";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++) {
            CE_Pregunta elemento = new CE_Pregunta();
            elemento.cr_CE_Pregunta( registros.get(i) );
            if (elemento.getRef_tipo_pregunta().getTp_id_tipo_pregunta().compareTo( CE_Tipo_Pregunta.ABIERTA ) != 0)
                elemento.ref_alternativa = CE_Alternativa.alternativas( elemento.getPr_id_pregunta().toString() );
            else
                elemento.ref_respuesta = new CE_Respuesta();
            elementos.add(elemento);
        }
        return elementos;
    }

    public static CE_Pregunta buscar_pregunta(String id_pregunta) {
        CE_Pregunta elemento = new CE_Pregunta();

        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ce_pregunta WHERE pr_id_pregunta = " + id_pregunta + ";";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++)
            elemento.cr_CE_Pregunta( registros.get(i) );

        return elemento;
    }

    public static JSONObject toJSON(List<CE_Pregunta> elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator<CE_Pregunta> it = elementos.iterator(); it.hasNext();) {
                CE_Pregunta elemento = it.next();
                jsonItems.put(toJSONObject(elemento));
            }
            json.put("identifier", "id_pregunta");
            json.put("label", "nombre");
            json.put("items", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(CE_Pregunta.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    public static JSONObject toJSONObject(CE_Pregunta elemento) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_pregunta", elemento.getPr_id_pregunta());
            json.put("nombre", elemento.getPr_nombre());

            json.put("tipo_pregunta", CE_Tipo_Pregunta.toJSONObject(CE_Tipo_Pregunta.buscar_tipo_pregunta(elemento.getRef_tipo_pregunta().getTp_id_tipo_pregunta())));
            json.put("orden", elemento.getPr_orden());
        } catch (Exception ex) {
            Logger.getLogger(CE_Pregunta.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
    
    public static JSONObject Pregunta_toJSON(List<CE_Pregunta> elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator<CE_Pregunta> it = elementos.iterator(); it.hasNext();)
                jsonItems.put( Pregunta_toJSONObject( it.next() ) );
            
            json.put("items", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(CE_Pregunta.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    public static JSONObject Pregunta_toJSONObject(CE_Pregunta elemento) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_pregunta", elemento.getPr_id_pregunta());
            json.put("nombre", elemento.getPr_nombre());
            json.put("tipo_pregunta", CE_Tipo_Pregunta.toJSONObject(CE_Tipo_Pregunta.buscar_tipo_pregunta(elemento.getRef_tipo_pregunta().getTp_id_tipo_pregunta())));
            json.put("orden", elemento.getPr_orden());
            if (elemento.ref_alternativa != null)
                json.put("alternativas", CE_Alternativa.Alternativa_toJSON( elemento.ref_alternativa ));
            else
                json.put("alternativas", CE_Alternativa.Alternativa_toJSON( CE_Alternativa.alternativas( elemento.getPr_id_pregunta().toString() ) ));
            if (elemento.ref_respuesta != null)
                json.put("respuesta", CE_Respuesta.toJSONObject( elemento.ref_respuesta ));
        } catch (Exception ex) {
            Logger.getLogger(CE_Pregunta.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
}
