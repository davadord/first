//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : WebSAE
//  @ File Name : CE_Evaluacion.java
//  @ Date : 23/04/2009
//  @ Author : Guillermo Pizarro
//
//
package websae.mce.dominio;

import java.math.BigDecimal;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import mad.eventos.Datos;
import mad.objetos.Registro;
import mad.objetos.Table;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class CE_Evaluacion {

    // <editor-fold defaultstate="collapsed" desc="Objetos Maestros">
    public CE_Convocatoria ref_convocatoria;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Objetos Dependientes">
    public List<CE_Seccion> ref_seccion;
    public List<CE_Evaluacion_Articulo> ref_evaluacion_tema_articulo;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Atributos">
    private BigDecimal ev_id_evaluacion;
    private String ev_mensaje;
    private String ev_descripcion;
    private String ev_estado;
    // </editor-fold>

    public CE_Evaluacion() {
        this.ref_convocatoria = new CE_Convocatoria();
    }

    // <editor-fold defaultstate="collapsed" desc="Setters & Getters">
    public String getEv_descripcion() {
        return ev_descripcion;
    }

    public void setEv_descripcion(String ev_descripcion) {
        this.ev_descripcion = ev_descripcion;
    }

    public String getEv_estado() {
        return ev_estado;
    }

    public void setEv_estado(String ev_estado) {
        this.ev_estado = ev_estado;
    }

    public BigDecimal getEv_id_evaluacion() {
        return ev_id_evaluacion;
    }

    public void setEv_id_evaluacion(BigDecimal ev_id_evaluacion) {
        this.ev_id_evaluacion = ev_id_evaluacion;
    }

    public String getEv_mensaje() {
        return ev_mensaje;
    }

    public void setEv_mensaje(String ev_mensaje) {
        this.ev_mensaje = ev_mensaje;
    }

    public CE_Convocatoria getRef_convocatoria() {
        return ref_convocatoria;
    }

    public void setRef_convocatoria(CE_Convocatoria ref_convocatoria) {
        this.ref_convocatoria = ref_convocatoria;
    }

    public List<CE_Evaluacion_Articulo> getRef_evaluacion_tema_articulo() {
        return ref_evaluacion_tema_articulo;
    }

    public void setRef_evaluacion_tema_articulo(List<CE_Evaluacion_Articulo> ref_evaluacion_tema_articulo) {
        this.ref_evaluacion_tema_articulo = ref_evaluacion_tema_articulo;
    }

    public List<CE_Seccion> getRef_seccion() {
        return ref_seccion;
    }

    public void setRef_seccion(List<CE_Seccion> ref_seccion) {
        this.ref_seccion = ref_seccion;
    }
    // </editor-fold>
    
    public void cr_CE_Evaluacion(Table objeto) {
        this.ev_id_evaluacion = new BigDecimal((Long) objeto.get("ev_id_evaluacion"));
        this.ev_mensaje = (String) objeto.get("ev_mensaje");
        this.ev_descripcion = (String) objeto.get("ev_descripcion");
        this.ev_estado = (String) objeto.get("ev_estado");
        
        this.ref_convocatoria.setCo_id_convocatoria( new BigDecimal((Long) objeto.get("ref_convocatoria")));
    }

    /**
     * 
     * @param id_seccion
     * @param id_pregunta
     * @param tipo_pregunta
     * @param id_respuesta
     * @param respuesta
     */
    public void registrar_pregunta(BigDecimal id_seccion, BigDecimal id_pregunta, BigDecimal tipo_pregunta, BigDecimal id_respuesta, String respuesta) {
        int n = this.ref_seccion.size();
        for (int i=0; i<n; i++) {
            CE_Seccion seccion = this.ref_seccion.get(i);
            if (seccion.getSe_id_seccion().compareTo(id_seccion) == 0)
                seccion.registrar_pregunta(id_pregunta, tipo_pregunta, id_respuesta, respuesta);
        }
    }

    public static CE_Evaluacion buscar_evaluacion(String id_evento) {
        String sql = "SELECT * FROM ce_convocatoria co, ce_evaluacion ev WHERE co.co_id_convocatoria = ev.ref_convocatoria AND co.ref_evento = " + id_evento + ";";
        return obtener_evaluacion( sql );
    }
    
    public static CE_Evaluacion buscar_evaluacion(BigDecimal id_articulo) {
        String sql = "SELECT * FROM ce_convocatoria co, ce_evaluacion ev WHERE co.co_id_convocatoria = ev.ref_convocatoria AND co.ref_evento = (SELECT ref_evento FROM CE_Articulo WHERE ar_id_articulo = "+id_articulo+");";
        return obtener_evaluacion( sql );
    }

    private static CE_Evaluacion obtener_evaluacion(String sql) {
        CE_Evaluacion elemento = new CE_Evaluacion();
        
        Datos dato = new Datos("WebSAE");
        Registro registros = dato.consulta( sql );
        for (int i = 0; i < registros.size(); i++) {
            elemento.cr_CE_Evaluacion( registros.get(i) );
            elemento.ref_seccion = CE_Seccion.secciones( elemento.getEv_id_evaluacion().toString() );
        }
        return elemento;
    }

    public static JSONObject toJSONObject(CE_Evaluacion elemento) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_evaluacion", elemento.getEv_id_evaluacion());
            json.put("mensaje", elemento.getEv_mensaje());
            json.put("descripcion", elemento.getEv_descripcion());
            json.put("estado", elemento.getEv_estado());
        } catch (Exception ex) {
            Logger.getLogger(CE_Evaluacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    public static JSONObject Evaluacion_toJSON(List< CE_Evaluacion > elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator< CE_Evaluacion > it = elementos.iterator(); it.hasNext();)
                jsonItems.put( Evaluacion_toJSONObject( it.next() ) );
            
            json.put("evaluacion", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(CE_Evaluacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    public static JSONObject Evaluacion_toJSONObject(CE_Evaluacion elemento) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_evaluacion", elemento.getEv_id_evaluacion());
            json.put("mensaje", elemento.getEv_mensaje());
            json.put("descripcion", elemento.getEv_descripcion());
            json.put("estado", elemento.getEv_estado());
            if (elemento.ref_seccion != null)
                json.put("secciones", CE_Seccion.Seccion_toJSON( elemento.ref_seccion ) );
            else
                json.put("secciones", CE_Seccion.Seccion_toJSON( CE_Seccion.secciones( elemento.getEv_id_evaluacion().toString() ) ));
        } catch (Exception ex) {
            Logger.getLogger(CE_Evaluacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
}
