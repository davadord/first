//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : WebSAE
//  @ File Name : AE_Registro.java
//  @ Date : 23/04/2009
//  @ Author : Guillermo Pizarro
//
//
package websae.mae.dominio;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import mad.eventos.Datos;
import mad.objetos.Registro;
import mad.objetos.Table;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import websae.informacion.Funciones;
import websae.mac.dominio.AC_Usuario;

public class AE_Registro {

    // <editor-fold defaultstate="collapsed" desc="Objeto Maestro">
    public List<AE_Material_Registro> ref_material_registro;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Objetos Dependientes">
    public AE_Categoria_Evento ref_categoria_evento;
    public AE_Subcategoria_Evento ref_subcategoria_evento;
    public AC_Usuario ref_usuario;
    public AE_Evento ref_evento;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Atributos">
    private BigDecimal re_id_registro;
    private Timestamp re_fecha;
    private Float re_valor_total;
    private Float re_valor_abonado;
    private Boolean re_aprobar_descuento;
    private Boolean re_asistencia;
    private Boolean re_pagado;
    private String re_estado;
    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Atributo de información">
    private Boolean re_registro;
    // </editor-fold>

    public AE_Registro() {
    }

    // <editor-fold defaultstate="collapsed" desc="Setters & Getters">
    public Boolean getRe_registro() {
        return re_registro;
    }

    public void setRe_registro(Boolean re_registro) {
        this.re_registro = re_registro;
    }

    public Float getRe_valor_abonado() {
        return re_valor_abonado;
    }

    public void setRe_valor_abonado(Float re_valor_abonado) {
        this.re_valor_abonado = re_valor_abonado;
    }

    public Boolean getRe_aprobar_descuento() {
        return re_aprobar_descuento;
    }

    public void setRe_aprobar_descuento(Boolean re_aprobar_descuento) {
        this.re_aprobar_descuento = re_aprobar_descuento;
    }

    public Boolean getRe_asistencia() {
        return re_asistencia;
    }

    public void setRe_asistencia(Boolean re_asistencia) {
        this.re_asistencia = re_asistencia;
    }

    public String getRe_estado() {
        return re_estado;
    }

    public void setRe_estado(String re_estado) {
        this.re_estado = re_estado;
    }

    public Timestamp getRe_fecha() {
        return re_fecha;
    }

    public void setRe_fecha(Timestamp re_fecha) {
        this.re_fecha = re_fecha;
    }

    public BigDecimal getRe_id_registro() {
        return re_id_registro;
    }

    public void setRe_id_registro(BigDecimal re_id_registro) {
        this.re_id_registro = re_id_registro;
    }

    public Boolean getRe_pagado() {
        return re_pagado;
    }

    public void setRe_pagado(Boolean re_pagado) {
        this.re_pagado = re_pagado;
    }

    public Float getRe_valor_total() {
        return re_valor_total;
    }

    public void setRe_valor_total(Float re_valor_total) {
        this.re_valor_total = re_valor_total;
    }

    public AE_Categoria_Evento getRef_categoria_evento() {
        return ref_categoria_evento;
    }

    public void setRef_categoria_evento(AE_Categoria_Evento ref_categoria_evento) {
        this.ref_categoria_evento = ref_categoria_evento;
    }

    public AE_Evento getRef_evento() {
        return ref_evento;
    }

    public void setRef_evento(AE_Evento ref_evento) {
        this.ref_evento = ref_evento;
    }

    public List<AE_Material_Registro> getRef_material_registro() {
        return ref_material_registro;
    }

    public void setRef_material_registro(List<AE_Material_Registro> ref_material_registro) {
        this.ref_material_registro = ref_material_registro;
    }

    public AE_Subcategoria_Evento getRef_subcategoria_evento() {
        return ref_subcategoria_evento;
    }

    public void setRef_subcategoria_evento(AE_Subcategoria_Evento ref_subcategoria_evento) {
        this.ref_subcategoria_evento = ref_subcategoria_evento;
    }

    public AC_Usuario getRef_usuario() {
        return ref_usuario;
    }

    public void setRef_usuario(AC_Usuario ref_usuario) {
        this.ref_usuario = ref_usuario;
    }
    // </editor-fold>

    public void cr_AE_Registro(Table objeto) {
        this.re_id_registro = new BigDecimal((Long) objeto.get("re_id_registro"));
        this.re_fecha = (Timestamp) objeto.get("re_fecha");
        this.re_valor_abonado = (Float) objeto.get("re_valor_abonado");
        this.re_valor_total = (Float) objeto.get("re_valor_total");
        this.re_aprobar_descuento = Funciones.getBoolean( objeto.get("re_aprobar_descuento") );
        this.re_asistencia = Funciones.getBoolean( objeto.get("re_asistencia") );
        this.re_pagado = Funciones.getBoolean( objeto.get("re_pagado") );
        this.re_estado = (String) objeto.get("re_estado");

        Long id_objeto = (Long) objeto.get("ref_categoria_evento");
        if (id_objeto != null) {
            this.ref_categoria_evento = new AE_Categoria_Evento();
            this.ref_categoria_evento.setCe_id_categoria_evento(new BigDecimal(id_objeto));
        }
        id_objeto = (Long) objeto.get("ref_subcategoria_evento");
        if (id_objeto != null) {
            this.ref_subcategoria_evento = new AE_Subcategoria_Evento();
            this.ref_subcategoria_evento.setSe_id_subcategoria_evento(new BigDecimal(id_objeto));
        }
        id_objeto = (Long) objeto.get("ref_evento");
        if (id_objeto != null) {
            this.ref_evento = new AE_Evento();
            this.ref_evento.setEv_id_evento(new BigDecimal(id_objeto));
        }
        id_objeto = (Long) objeto.get("ref_usuario");
        if (id_objeto != null) {
            this.ref_usuario = new AC_Usuario();
            this.ref_usuario.setUs_id_usuario( new BigDecimal(id_objeto) );
        }
    }
    
    private static List<BigDecimal> id_subeventos(String id_evento) {
        List<BigDecimal> ids = new LinkedList<BigDecimal>();

        Datos datos = new Datos("WebSAE");
        String sql = "SELECT subev.ev_id_evento FROM ae_evento ev, ae_asignar_evento ae, ae_evento subev WHERE ev.ev_id_evento = ae.ref_evento AND subev.ev_id_evento = ae.ref_subevento AND ev.ev_id_evento = " + id_evento + ";";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++) {
            Table objeto = (Table) registros.get(i);
            BigDecimal id_subevento = new BigDecimal((Long) objeto.get("ev_id_evento"));
            ids.add(id_subevento);
        }
        return ids;
    }

    private static Float calcular_precio(String id_evento, AC_Usuario usuario) {
        List<BigDecimal> ids = id_subeventos(id_evento);
        Float precios = new Float(0.0);
        for (Iterator<BigDecimal> it = ids.iterator(); it.hasNext();) {
            Datos datos = new Datos("WebSAE");
            String sql = "SELECT SUM( ce.ce_precio ) as suma_precio FROM ae_registro re, ae_categoria_evento ce, AE_Subcategoria_evento se " +
                         "WHERE re.ref_categoria_evento = null AND re.ref_evento = " + id_evento + " AND re.ref_usuario = " + usuario.getUs_id_usuario() + " AND re.ref_categoria_evento = ce.ce_id_categoria_evento GROUP BY ce.ce_precio;";
            Registro registros = datos.consulta(sql);
            for (int i = 0; i < registros.size(); i++) {
            }
        }
        return precios;
    }

    public static List<AE_Registro> mostrar_usuarios_registrados(String id_evento) {
        List<AE_Registro> elementos = new LinkedList<AE_Registro>();
        
        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ae_registro WHERE ref_evento = " + id_evento + ";";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++) {
            AE_Registro elemento = new AE_Registro();
            elemento.cr_AE_Registro((Table) registros.get(i));
            elementos.add(elemento);
        }
        return elementos;
    }

    public static List<AE_Registro> usuarios_registrados(String id_evento, String lang) {
        List<AE_Registro> elementos = new LinkedList<AE_Registro>();
        
        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM (ae_registro re INNER JOIN ac_usuario us ON (us.us_id_usuario = re.ref_usuario )) INNER JOIN AE_Evento ev ON (re.ref_evento = ev.ev_id_evento) WHERE re.ref_evento = "+id_evento+" OR re.ref_evento IN (SELECT sub.ev_id_evento FROM AE_Evento ev, AE_Asignar_Evento ae, AE_Evento sub WHERE ev.ev_id_evento = ae.ref_evento AND sub.ev_id_evento = ae.ref_subevento AND ev.ev_id_evento = "+id_evento+" )";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++) {
            AE_Registro elemento = new AE_Registro();
            elemento.cr_AE_Registro(registros.get(i));
            elemento.ref_evento = new AE_Evento();
            elemento.ref_evento.setEv_id_evento( Funciones.getBigDecimal(registros.get(i).get("ev_id_evento")) );
            elemento.ref_evento.setEv_nombre((String) registros.get(i).get("ev_nombre_"+lang), lang);
            elemento.ref_usuario = new AC_Usuario();
            elemento.ref_usuario.setUs_id_usuario( Funciones.getBigDecimal( registros.get(i).get("us_id_usuario") ) );
            elemento.ref_usuario.setUs_nombre( (String) registros.get(i).get("us_nombre"));
            elemento.ref_usuario.setUs_apellido( (String) registros.get(i).get("us_apellido"));
            elementos.add(elemento);
        }
        return elementos;
    }

    public static List<AE_Registro> usuarios_pendientes(String id_evento, String lang) {
        List<AE_Registro> elementos = new LinkedList<AE_Registro>();

        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM (ae_registro re INNER JOIN ac_usuario us ON (us.us_id_usuario = re.ref_usuario )) INNER JOIN AE_Evento ev ON (re.ref_evento = ev.ev_id_evento) WHERE (re.ref_evento = "+id_evento+" OR re.ref_evento IN (SELECT sub.ev_id_evento FROM AE_Evento ev, AE_Asignar_Evento ae, AE_Evento sub WHERE ev.ev_id_evento = ae.ref_evento AND sub.ev_id_evento = ae.ref_subevento AND ev.ev_id_evento = "+id_evento+" )) AND (re.re_estado = 'P' OR re.re_estado = 'PP') ";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++) {
            AE_Registro elemento = new AE_Registro();
            elemento.cr_AE_Registro(registros.get(i));
            elemento.ref_evento = new AE_Evento();
            elemento.ref_evento.setEv_id_evento( Funciones.getBigDecimal(registros.get(i).get("ev_id_evento")) );
            elemento.ref_evento.setEv_nombre((String) registros.get(i).get("ev_nombre_"+lang), lang);
            elemento.ref_usuario = new AC_Usuario();
            elemento.ref_usuario.setUs_id_usuario( Funciones.getBigDecimal( registros.get(i).get("us_id_usuario") ) );
            elemento.ref_usuario.setUs_nombre( (String) registros.get(i).get("us_nombre"));
            elemento.ref_usuario.setUs_apellido( (String) registros.get(i).get("us_apellido"));
            
            sql = "SELECT ce.* FROM ae_registro re, ae_categoria_evento ce WHERE re.ref_categoria_evento = ce.ce_id_categoria_evento AND ce.ref_evento = "+id_evento+" AND re.ref_usuario = "+elemento.ref_usuario.getUs_id_usuario()+";";
            Registro categorias = datos.consulta(sql);
            for (int j = 0; j < categorias.size(); j++) {
                elemento.ref_categoria_evento = new AE_Categoria_Evento();
                elemento.ref_categoria_evento.cr_AE_Categoria_Evento( categorias.get(j) );
            }
            sql = "SELECT se.* FROM ae_registro re, ae_subcategoria_evento se WHERE re.ref_subcategoria_evento = se.se_id_subcategoria_evento AND se.ref_evento = "+id_evento+" AND re.ref_usuario = "+elemento.ref_usuario.getUs_id_usuario()+";";
            Registro subcategorias = datos.consulta(sql);
            for (int j = 0; j < subcategorias.size(); j++) {
                elemento.ref_subcategoria_evento = new AE_Subcategoria_Evento();
                elemento.ref_subcategoria_evento.cr_AE_Subcategoria_Evento( subcategorias.get(j) );
            }
            elementos.add(elemento);
        }
        return elementos;
    }

    public static List<AE_Registro> registros(String id_evento, AC_Usuario usuario) {
        List<AE_Registro> elementos = new LinkedList<AE_Registro>();
        //GUILLE si puedes, el valor total a pagar (evento+subevento - %descuento) guardalo en
        //una variable de sesion llamada [Payment_Amount]  (es para paypal)
        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ae_registro WHERE ref_evento = " + id_evento + " AND ref_usuario =" + usuario.getUs_id_usuario() + ";";
        Registro registros = datos.consulta(sql);
        for (int i = 0; i < registros.size(); i++) {
            AE_Registro elemento = new AE_Registro();
            elemento.cr_AE_Registro( registros.get(i) );
            elementos.add(elemento);
        }
        return elementos;
    }
    
    public static JSONObject toJSON_usuarios_registrados(List<AE_Registro> elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator<AE_Registro> it = elementos.iterator(); it.hasNext();) {
                AE_Registro elemento = it.next();
                // Se setea en true para obtener los datos del usuario.
                jsonItems.put(toJSONObject(elemento, true));
            }
            json.put("identifier", "id_registro");
            json.put("label", "fecha");
            json.put("items", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(AE_Registro.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
    
    public static JSONObject toJSON(List<AE_Registro> elementos) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator<AE_Registro> it = elementos.iterator(); it.hasNext();) {
                AE_Registro elemento = it.next();
                jsonItems.put(toJSONObject(elemento, false));
            }
            json.put("identifier", "id_registro");
            json.put("label", "fecha");
            json.put("items", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(AE_Registro.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
    
    public static JSONObject toJSONObject(AE_Registro elemento, Boolean info_usuario) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_registro", elemento.getRe_id_registro());
            json.put("fecha", elemento.getRe_fecha());
            DateFormat dfStyle = DateFormat.getDateInstance(DateFormat.LONG);
            if (elemento.getRe_fecha() != null) {
                json.put("fecha_long", dfStyle.format(elemento.getRe_fecha()));
            }
            json.put("valor_abonado", elemento.getRe_valor_abonado());
            json.put("valor_total", elemento.getRe_valor_total());
            json.put("aprobar_descuento", elemento.getRe_aprobar_descuento());
            json.put("asistencia", elemento.getRe_asistencia());
            json.put("pagado", elemento.getRe_pagado());
            json.put("estado", elemento.getRe_estado());
            
            if (elemento.ref_categoria_evento != null && elemento.ref_categoria_evento.getCe_id_categoria_evento() != null) {
                json.put("precio", AE_Categoria_Evento.toJSONObject(AE_Categoria_Evento.buscar_categoria_evento(elemento.ref_categoria_evento.getCe_id_categoria_evento())));
            }
            if (elemento.ref_subcategoria_evento != null && elemento.ref_subcategoria_evento.getSe_id_subcategoria_evento() != null) {
                json.put("descuento", AE_Subcategoria_Evento.toJSONObject(AE_Subcategoria_Evento.buscar_subcategoria_evento(elemento.ref_subcategoria_evento.getSe_id_subcategoria_evento())));
            }
            if (elemento.ref_evento != null && elemento.ref_evento.getEv_id_evento() != null) {
                json.put("id_evento", elemento.ref_evento.getEv_id_evento());
            }
            /* La informacion del Usuario es enviada solo del lado del administrador. */
            if (info_usuario && elemento.ref_usuario != null && elemento.ref_usuario.getUs_id_usuario() != null) {
                json.put("usuario", AC_Usuario.toJSONObject( AC_Usuario.buscar_usuario( elemento.ref_usuario.getUs_id_usuario().toString() ) ) );
            }
        } catch (Exception ex) {
            Logger.getLogger(AE_Registro.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
    
    public static JSONObject toJSON_Registro(List<AE_Registro> elementos, String lang) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator<AE_Registro> it = elementos.iterator(); it.hasNext();) {
                AE_Registro elemento = it.next();
                jsonItems.put(toJSONObject_Registro(elemento, lang));
            }
            json.put("identifier", "id_registro");
            json.put("label", "fecha");
            json.put("items", jsonItems);
        } catch (JSONException ex) {
            Logger.getLogger(AE_Registro.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    public static JSONObject toJSONObject_Registro(AE_Registro elemento, String lang) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_registro", elemento.getRe_id_registro());
            json.put("fecha", elemento.getRe_fecha());
            DateFormat dfStyle = DateFormat.getDateInstance(DateFormat.LONG);
            if (elemento.getRe_fecha() != null) {
                json.put("fecha_long", dfStyle.format(elemento.getRe_fecha()));
            }
            json.put("valor_abonado", elemento.getRe_valor_abonado());
            json.put("valor_total", elemento.getRe_valor_total());
            json.put("aprobar_descuento", elemento.getRe_aprobar_descuento());
            json.put("asistencia", elemento.getRe_asistencia());
            json.put("pagado", elemento.getRe_pagado());
            json.put("estado", elemento.getRe_estado());
            
            json.put("evento_id", elemento.ref_evento.getEv_id_evento());
            json.put("evento_nombre", elemento.ref_evento.getEv_nombre(lang) );
            json.put("usuario_id", elemento.ref_usuario.getUs_id_usuario() );
            json.put("usuario_nombre_apellido", elemento.ref_usuario.getUs_nombre() + " " + elemento.ref_usuario.getUs_apellido() );
            if (elemento.ref_categoria_evento != null) json.put("precio", AE_Categoria_Evento.toJSONObject( elemento.ref_categoria_evento ) );
            if (elemento.ref_subcategoria_evento != null) json.put("descuento", AE_Subcategoria_Evento.toJSONObject( elemento.ref_subcategoria_evento ) );
        } catch (Exception ex) {
            Logger.getLogger(AE_Registro.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
}
