//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : WebSAE - Sistema de Administración de Eventos
//  @ File Name : AC_Opcion.java
//  @ Date : 28/03/2009
//  @ Author : Guillermo Pizarro
//  @ Version : v1.0.0
//
//

package websae.mac.dominio;

import java.math.BigDecimal;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import mad.eventos.Datos;
import mad.objetos.Registro;
import mad.objetos.Table;
import org.json.JSONArray;
import org.json.JSONObject;
import websae.informacion.Estado;

public class AC_Opcion {

    // <editor-fold defaultstate="collapsed" desc="Objetos dependientes">
    public List< AC_Perfil_Opcion > ref_perfil_opcion;
    public List< AC_Asignar_Opcion > ref_subopcion;
    public AC_Asignar_Opcion ref_opcion;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Atributos">
    private BigDecimal op_id_opcion;
    private String op_nombre;
    private String op_url;
    private Boolean op_es_padre;
    private String op_estado;
    /** Atributo de informacion, es para conocer si se encuentra asignado a un usuario la opcion. */
    private Boolean op_asignado;
    private String op_url_usuario;
    // </editor-fold>

    public AC_Opcion() {
    }

    // <editor-fold defaultstate="collapsed" desc="Setters & Getters">
    public Boolean getOp_es_padre() {
        return op_es_padre;
    }

    public void setOp_es_padre(Boolean op_es_padre) {
        this.op_es_padre = op_es_padre;
    }

    public String getOp_estado() {
        return op_estado;
    }

    public void setOp_estado(String op_estado) {
        this.op_estado = op_estado;
    }

    public BigDecimal getOp_id_opcion() {
        return op_id_opcion;
    }

    public void setOp_id_opcion(BigDecimal op_id_opcion) {
        this.op_id_opcion = op_id_opcion;
    }

    public String getOp_nombre() {
        return op_nombre;
    }

    public void setOp_nombre(String op_nombre) {
        this.op_nombre = op_nombre;
    }

    public String getOp_url() {
        return op_url;
    }

    public void setOp_url(String op_url) {
        this.op_url = op_url;
    }

    public void setOp_asignado(Boolean op_asignado) {
        this.op_asignado = op_asignado;
    }

    public Boolean getOp_asignado() {
        return op_asignado;
    }

    public String getOp_url_usuario() {
        return op_url_usuario;
    }

    public void setOp_url_usuario(String op_url_usuario) {
        this.op_url_usuario = op_url_usuario;
    }
    // </editor-fold>

    public void cr_AC_Opcion(Table objeto, String lang) {
        this.op_id_opcion = new BigDecimal( (Long) objeto.get("op_id_opcion") );
        this.op_nombre = (String) objeto.get("op_nombre_" + lang);
        this.op_estado = (String) objeto.get("op_estado");
        this.op_url = (String) objeto.get("op_url");
        this.op_url_usuario = (String) objeto.get("op_url_usuario");
    }

	public void fin_AC_Opcion() {
	}

    public static List< AC_Opcion > mostrar_opciones_evento(String language, String tipo) {
        List< AC_Opcion > opciones = new LinkedList<AC_Opcion>();

        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ac_opcion WHERE op_tipo = '" + tipo + "' AND op_estado = '" + Estado.VIGENTE + "' " +
                     "ORDER BY op_nombre_" + language + ";";
        Registro registros = datos.consulta( sql );
        for (int i=0; i<registros.size(); i++) {
            Table objeto = (Table) registros.get(i);
            AC_Opcion opcion = new AC_Opcion();
            opcion.cr_AC_Opcion(objeto, language);
            /** Se cargan las subopciones existentes */
            cargar_subopciones(opcion, language, tipo);
            opciones.add(opcion);
        }
        return opciones;
    }

    public static List< AC_Opcion > mostrar_opciones_por_id_evento(String id_evento, String language, String tipo, boolean tipo_publico) {
        List< AC_Opcion > opciones = new LinkedList<AC_Opcion>();

        Datos datos = new Datos("WebSAE");
        String sql = "SELECT * FROM ae_evento ev, ae_evento_opcion eo, ac_opcion op " +
                     "WHERE ev.ev_id_evento = eo.ref_evento AND eo.ref_opcion = op.op_id_opcion AND ev.ev_id_evento = " + id_evento + " AND op.op_tipo = '"+tipo+"' AND " +
                     "eo.eo_estado = '" + Estado.VIGENTE + "' AND op.op_estado = '" + Estado.VIGENTE + "' ";
        if ( tipo_publico ) {
            sql += " AND op.op_tipo_publico = 1 ";
        }
        sql += " ORDER BY op.op_nombre_" + language + ";";
        Registro registros = datos.consulta( sql );
        for (int i=0; i<registros.size(); i++) {
            Table objeto = (Table) registros.get(i);
            AC_Opcion opcion = new AC_Opcion();
            opcion.cr_AC_Opcion(objeto, language);
            /** Se cargan las subopciones existentes */
            cargar_subopciones(opcion, language, tipo);
            opciones.add(opcion);
        }
        return opciones;
    }

    public static List< AC_Opcion > mostrar_opciones(String language, String tipo) {
        List< AC_Opcion > opciones = new LinkedList<AC_Opcion>();

        Datos datos = new Datos("WebSAE");
        Registro registros = datos.consulta("call ac_obtener_opciones("+AC_Perfil.VISITANTE+", '"+tipo+"');");
        for (int i=0; i<registros.size(); i++) {
            Table objeto = (Table) registros.get(i);
            AC_Opcion opcion = new AC_Opcion();
            opcion.cr_AC_Opcion(objeto, language);
            /** Se cargan las subopciones existentes */
            cargar_subopciones(opcion, language, tipo);
            opciones.add(opcion);
        }

        return opciones;
    }

    public static List< AC_Opcion > mostrar_opciones(String email, String language, String tipo) {
        List< AC_Opcion > opciones = new LinkedList<AC_Opcion>();

        Datos datos = new Datos("WebSAE");
        Registro registros = datos.consulta("call ac_obtener_opciones_por_usuario('"+email+"', '"+tipo+"');");
        for (int i=0; i<registros.size(); i++) {
            Table objeto = (Table) registros.get(i);
            AC_Opcion opcion = new AC_Opcion();
            opcion.cr_AC_Opcion(objeto, language);
            /** Se cargan las subopciones existentes */
            cargar_subopciones(opcion, language, tipo);
            opciones.add(opcion);
        }

        return opciones;
    }

    private static void cargar_subopciones(AC_Opcion opcion, String language, String tipo) {
        opcion.ref_subopcion = new LinkedList<AC_Asignar_Opcion>();

        Datos datos = new Datos("WebSAE");
        Registro sub_registros = datos.consulta("call ac_obtener_subopciones("+opcion.getOp_id_opcion()+", '"+tipo+"');");
        for (int j=0; j<sub_registros.size(); j++) {
            Table sub_objeto = (Table) sub_registros.get(j);

            AC_Asignar_Opcion sub_opcion = new AC_Asignar_Opcion();
            sub_opcion.ref_subopcion.cr_AC_Opcion( sub_objeto, language );
            opcion.ref_subopcion.add( sub_opcion );
        }
    }

    public static JSONObject toJSONOpciones(List< AC_Opcion > opciones) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator< AC_Opcion > iter = opciones.iterator() ; iter.hasNext() ; ) {
                AC_Opcion opcion = iter.next();
                if (opcion != null) jsonItems.put( toJSONObject( opcion ) );
            }

            json.put("opciones", jsonItems);
        } catch(Exception ex) {
            Logger.getLogger(AC_Opcion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    private static JSONObject toJSONSubOpciones(BigDecimal id_opcion, List< AC_Asignar_Opcion > subopciones) {
        JSONObject json = new JSONObject();
        try {
            JSONArray jsonItems = new JSONArray();
            for (Iterator< AC_Asignar_Opcion > iter = subopciones.iterator() ; iter.hasNext() ; ) {
                AC_Asignar_Opcion objeto = iter.next();
                if (objeto.ref_subopcion != null)
                    jsonItems.put( toJSONObject( objeto.ref_subopcion ) );
            }
            json.put("id", id_opcion);
            json.put("itemdata", jsonItems);
        } catch(Exception ex) {
            Logger.getLogger(AC_Opcion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }

    private static JSONObject toJSONObject(AC_Opcion opcion) {
        JSONObject json = new JSONObject();
        try {
            json.put("id_opcion", opcion.getOp_id_opcion() );
            json.put("text", opcion.getOp_nombre() );
            json.put("nombre", opcion.getOp_nombre() );
            json.put("url", opcion.getOp_url() );
            json.put("url_usuario", opcion.getOp_url_usuario() );
            json.put("estado", opcion.getOp_estado() );
            if (opcion.ref_subopcion != null && opcion.ref_subopcion.size() > 0)
                json.put("opciones", toJSONSubOpciones( opcion.getOp_id_opcion(), opcion.ref_subopcion ) );
        } catch (Exception ex) {
            Logger.getLogger(AC_Opcion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return json;
    }
}
